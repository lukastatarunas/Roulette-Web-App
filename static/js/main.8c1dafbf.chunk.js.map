{"version":3,"sources":["components/BaseURL.js","components/Stats.js","components/GameBoard.js","components/Events.js","App.js","serviceWorker.js","index.js"],"names":["BaseURL","className","defaultValue","Stats","componentDidMount","fetchData","componentDidUpdate","axios","get","then","res","setState","data","loading","catch","error","state","this","length","colSpan","map","item","i","key","result","count","Component","GameBoard","props","filteredIdArr","positionToId","filter","id","buttons","document","querySelectorAll","j","Number","innerHTML","randomNumber","style","background","setTimeout","stats","stringArr","Events","setInterval","getRandomNumber","Math","floor","random","startDelta","string","push","str","isNaN","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c1dafbf.chunk.js","sourcesContent":["import React from 'react'\r\nimport './BaseURL.css'\r\n\r\nconst BaseURL = () => {\r\n    return (\r\n        <div className=\"base-url\">\r\n            <h1>Aardvark Roulette game API demo</h1>\r\n            <form>\r\n                <div className=\"form-group\">\r\n                    <label className=\"form-label\">API base URL</label>\r\n                    <input className=\"form-input\" defaultValue=\"https://dev-games-backend.advbet.com/v1/ab-roulette/1/\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BaseURL","import React, { Component } from 'react'\r\nimport './Stats.css'\r\nimport axios from 'axios'\r\n\r\nclass Stats extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            data: [],\r\n            loading: true,\r\n            error: null\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.fetchData()\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        this.fetchData()\r\n    }\r\n\r\n    fetchData = () => {\r\n        axios.get(`https://dev-games-backend.advbet.com/v1/ab-roulette/1/stats`)\r\n        .then(res => {\r\n            this.setState({\r\n                data: res.data,\r\n                loading: false\r\n            })\r\n        })\r\n        .catch(error => {\r\n            this.setState({\r\n                error,\r\n                loading: false\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { data, loading, error } = this.state\r\n\r\n        if (loading) return <div>Loading</div>\r\n        if (error) return <div>Error</div>\r\n\r\n        if (data.length >= 1) {\r\n            return ( \r\n                <div className=\"stats\">\r\n                    <h4 className=\"stats-h4\">Stats (last 200)</h4>\r\n                    <table className=\"stats-table\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>&nbsp;</td>\r\n                                <th colSpan=\"5\" className=\"cold\">Cold</th>\r\n                                <th colSpan=\"27\" className=\"neutral\">Neutral</th>\r\n                                <th colSpan=\"5\" className=\"hot\">Hot</th>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Slot</th>\r\n                                {data.map((item, i) => <td key={i}>{item.result}</td>)}\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Hits</th>\r\n                                {data.map((item, i) => <td key={i}>{item.count}</td>)}\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n        }\r\n        return <div>No Data</div>\r\n    }\r\n}\r\n\r\nexport default Stats","import React, { Component } from 'react'\r\nimport './GameBoard.css'\r\nimport axios from 'axios'\r\n\r\nclass GameBoard extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: {},\r\n            loading: true,\r\n            error: null,\r\n            stats: []\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        axios.get(`https://dev-games-backend.advbet.com/v1/ab-roulette/1/configuration`)\r\n        .then(res => {\r\n            this.setState({\r\n                data: res.data,\r\n                loading: false\r\n            })\r\n        })\r\n        .catch(error => {\r\n            this.setState({\r\n                error,\r\n                loading: false\r\n            })\r\n        })\r\n    }\r\n    \r\n    componentDidUpdate = () => {\r\n        let filteredIdArr = []\r\n        filteredIdArr = this.state.data.positionToId.filter((id, i) => i % 2 !== 0)\r\n\r\n        const buttons = document.querySelectorAll(\"button\")\r\n\r\n        for (let i = 0; i < buttons.length; i++) {\r\n            for (let j = 0; j < filteredIdArr.length; j++) {\r\n\r\n                if (Number(buttons[i].innerHTML) === this.props.randomNumber) {\r\n                    buttons[i].style.background = \"#007BFF\"\r\n\r\n                    if (Number(buttons[i].innerHTML) === filteredIdArr[j]) {\r\n                        setTimeout(() => buttons[i].style.background = \"#D9534F\", 3000)\r\n                    }\r\n\r\n                    else {\r\n                        setTimeout(() => buttons[i].style.background = \"#000000\", 3000)\r\n                    }\r\n                }\r\n\r\n                if (Number(buttons[i].innerHTML) === filteredIdArr[j]) {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { data, loading, error } = this.state\r\n\r\n        const green = \"#449D44\"\r\n        const red = \"#D9534F\"\r\n        const black = \"#000000\"\r\n\r\n        if (loading) return <div>Loading</div>\r\n        if (error) return <div>Error</div>\r\n\r\n        if (data.positionToId.length >= 1) {\r\n            return ( \r\n                <div className=\"game-board\">\r\n                    <h4 className=\"game-board-h4\">Game board</h4>\r\n                    <div>\r\n                        {data.positionToId.map((id, i) => <button key={i} style={i === 0 ? {background: green} : i % 2 !== 0 ? {background: red} : {background: black}}>{id}</button>)}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return <div>No Data</div>\r\n    }\r\n}\r\n\r\nexport default GameBoard","import React, { Component } from 'react'\r\nimport './Events.css'\r\nimport axios from 'axios'\r\nimport GameBoard from './GameBoard'\r\n\r\nlet stringArr = []\r\n\r\nclass Events extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            data: {}\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        setInterval(() => { \r\n            axios.get(`https://dev-games-backend.advbet.com/v1/ab-roulette/1/nextGame`)\r\n            .then(res => {\r\n                this.setState({\r\n                    data: res.data\r\n                })\r\n            })\r\n        }, 1000)\r\n    }\r\n\r\n    getRandomNumber = () => {\r\n        return Math.floor(Math.random() * (36 - 0 + 1)) + 0\r\n    }\r\n\r\n    render() {\r\n        \r\n        let randomNumber = this.state.data.startDelta === 1 ? this.getRandomNumber() : null\r\n        let string = `Game ${this.state.data.id} ended, result is ${Number(randomNumber)}`\r\n\r\n        if (randomNumber) {\r\n            stringArr.push(string)\r\n        }\r\n\r\n        return (\r\n            <div className=\"events\">\r\n                <GameBoard randomNumber={randomNumber} />\r\n                <h4 className=\"events-h4\">Events</h4>\r\n                <ul>\r\n                    {stringArr.map((str, i) => \r\n                        <li key={i}>\r\n                            {str}\r\n                        </li>\r\n                    )}\r\n                    <li>\r\n                        {`Game ${this.state.data.id} will start in ${isNaN(this.state.data.startDelta - 1) ? `` : this.state.data.startDelta - 1} sec`}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Events","import React from 'react'\r\nimport './App.css'\r\nimport BaseURL from './components/BaseURL'\r\nimport Stats from './components/Stats'\r\nimport Events from './components/Events'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <BaseURL />\r\n      <Stats />\r\n      <Events />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\nserviceWorker.unregister()"],"sourceRoot":""}